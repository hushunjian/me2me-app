<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.me2me.content.mapper.ContentMapper">
  <resultMap id="BaseResultMap" type="com.me2me.content.model.Content">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Aug 08 20:09:05 CST 2017.
    -->
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="uid" jdbcType="BIGINT" property="uid" />
    <result column="forward_cid" jdbcType="BIGINT" property="forwardCid" />
    <result column="title" jdbcType="VARCHAR" property="title" />
    <result column="feeling" jdbcType="VARCHAR" property="feeling" />
    <result column="type" jdbcType="INTEGER" property="type" />
    <result column="conver_image" jdbcType="VARCHAR" property="converImage" />
    <result column="forward_title" jdbcType="VARCHAR" property="forwardTitle" />
    <result column="forward_url" jdbcType="VARCHAR" property="forwardUrl" />
    <result column="content_type" jdbcType="INTEGER" property="contentType" />
    <result column="thumbnail" jdbcType="VARCHAR" property="thumbnail" />
    <result column="hot_value" jdbcType="INTEGER" property="hotValue" />
    <result column="person_count" jdbcType="INTEGER" property="personCount" />
    <result column="review_count" jdbcType="INTEGER" property="reviewCount" />
    <result column="like_count" jdbcType="INTEGER" property="likeCount" />
    <result column="favorite_count" jdbcType="INTEGER" property="favoriteCount" />
    <result column="read_count" jdbcType="INTEGER" property="readCount" />
    <result column="read_count_dummy" jdbcType="INTEGER" property="readCountDummy" />
    <result column="is_top" jdbcType="INTEGER" property="isTop" />
    <result column="authorization" jdbcType="INTEGER" property="authorization" />
    <result column="rights" jdbcType="INTEGER" property="rights" />
    <result column="author" jdbcType="INTEGER" property="author" />
    <result column="status" jdbcType="INTEGER" property="status" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="update_id" jdbcType="BIGINT" property="updateId" />
    <result column="ugc_status" jdbcType="INTEGER" property="ugcStatus" />
  </resultMap>
  
    <resultMap id="BaseResultMap2" type="com.me2me.content.dto.Content2Dto">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Jun 21 17:39:22 CST 2016.
    -->
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="uid" jdbcType="BIGINT" property="uid" />
    <result column="forward_cid" jdbcType="BIGINT" property="forwardCid" />
    <result column="title" jdbcType="VARCHAR" property="title" />
    <result column="feeling" jdbcType="VARCHAR" property="feeling" />
    <result column="type" jdbcType="INTEGER" property="type" />
    <result column="conver_image" jdbcType="VARCHAR" property="converImage" />
    <result column="forward_title" jdbcType="VARCHAR" property="forwardTitle" />
    <result column="forward_url" jdbcType="VARCHAR" property="forwardUrl" />
    <result column="content_type" jdbcType="INTEGER" property="contentType" />
    <result column="thumbnail" jdbcType="VARCHAR" property="thumbnail" />
    <result column="hot_value" jdbcType="INTEGER" property="hotValue" />
    <result column="person_count" jdbcType="INTEGER" property="personCount" />
    <result column="review_count" jdbcType="INTEGER" property="reviewCount" />
    <result column="like_count" jdbcType="INTEGER" property="likeCount" />
    <result column="favorite_count" jdbcType="INTEGER" property="favoriteCount" />
    <result column="read_count" jdbcType="INTEGER" property="readCount" />
    <result column="read_count_dummy" jdbcType="INTEGER" property="readCountDummy" />
    <result column="is_top" jdbcType="INTEGER" property="isTop" />
    <result column="authorization" jdbcType="INTEGER" property="authorization" />
    <result column="rights" jdbcType="INTEGER" property="rights" />
    <result column="author" jdbcType="INTEGER" property="author" />
    <result column="status" jdbcType="INTEGER" property="status" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="update_id" jdbcType="BIGINT" property="updateId" />
    <result column="ugc_status" jdbcType="INTEGER" property="ugcStatus" />
    <result column="hid" jdbcType="BIGINT" property="hid" />
  </resultMap>
  
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.me2me.content.model.Content">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Aug 08 20:09:05 CST 2017.
    -->
    <result column="content" jdbcType="LONGVARCHAR" property="content" />
  </resultMap>
  
    <resultMap extends="BaseResultMap2" id="ResultMapWithBLOBs2" type="com.me2me.content.dto.Content2Dto">
    <!--
  WARNING - @mbggenerated
  This element is automatically generated by MyBatis Generator, do not modify.
  This element was generated on Tue Jun 21 17:39:22 CST 2016.
-->
    <result column="content" jdbcType="LONGVARCHAR" property="content" />
  </resultMap>
  
  <sql id="Example_Where_Clause">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Aug 08 20:09:05 CST 2017.
    -->
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Aug 08 20:09:05 CST 2017.
    -->
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Aug 08 20:09:05 CST 2017.
    -->
    id, uid, forward_cid, title, feeling, type, conver_image, forward_title, forward_url, 
    content_type, thumbnail, hot_value, person_count, review_count, like_count, favorite_count, 
    read_count, read_count_dummy, is_top, authorization, rights, author, status, create_time, 
    update_time, update_id, ugc_status
  </sql>
  <sql id="Blob_Column_List">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Aug 08 20:09:05 CST 2017.
    -->
    content
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="com.me2me.content.model.ContentExample" resultMap="ResultMapWithBLOBs">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Aug 08 20:09:05 CST 2017.
    -->
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from content
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="com.me2me.content.model.ContentExample" resultMap="BaseResultMap">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Aug 08 20:09:05 CST 2017.
    -->
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from content
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="ResultMapWithBLOBs">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Aug 08 20:09:05 CST 2017.
    -->
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from content
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Aug 08 20:09:05 CST 2017.
    -->
    delete from content
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.me2me.content.model.ContentExample">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Aug 08 20:09:05 CST 2017.
    -->
    delete from content
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.me2me.content.model.Content">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Aug 08 20:09:05 CST 2017.
    -->
    insert into content (id, uid, forward_cid, 
      title, feeling, type, 
      conver_image, forward_title, forward_url, 
      content_type, thumbnail, hot_value, 
      person_count, review_count, like_count, 
      favorite_count, read_count, read_count_dummy, 
      is_top, authorization, rights, 
      author, status, create_time, 
      update_time, update_id, ugc_status, 
      content)
    values (#{id,jdbcType=BIGINT}, #{uid,jdbcType=BIGINT}, #{forwardCid,jdbcType=BIGINT}, 
      #{title,jdbcType=VARCHAR}, #{feeling,jdbcType=VARCHAR}, #{type,jdbcType=INTEGER}, 
      #{converImage,jdbcType=VARCHAR}, #{forwardTitle,jdbcType=VARCHAR}, #{forwardUrl,jdbcType=VARCHAR}, 
      #{contentType,jdbcType=INTEGER}, #{thumbnail,jdbcType=VARCHAR}, #{hotValue,jdbcType=INTEGER}, 
      #{personCount,jdbcType=INTEGER}, #{reviewCount,jdbcType=INTEGER}, #{likeCount,jdbcType=INTEGER}, 
      #{favoriteCount,jdbcType=INTEGER}, #{readCount,jdbcType=INTEGER}, #{readCountDummy,jdbcType=INTEGER}, 
      #{isTop,jdbcType=INTEGER}, #{authorization,jdbcType=INTEGER}, #{rights,jdbcType=INTEGER}, 
      #{author,jdbcType=INTEGER}, #{status,jdbcType=INTEGER}, #{createTime,jdbcType=TIMESTAMP}, 
      #{updateTime,jdbcType=TIMESTAMP}, #{updateId,jdbcType=BIGINT}, #{ugcStatus,jdbcType=INTEGER}, 
      #{content,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.me2me.content.model.Content" keyProperty="id" useGeneratedKeys="true">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Aug 08 20:09:05 CST 2017.
    -->
    insert into content
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="uid != null">
        uid,
      </if>
      <if test="forwardCid != null">
        forward_cid,
      </if>
      <if test="title != null">
        title,
      </if>
      <if test="feeling != null">
        feeling,
      </if>
      <if test="type != null">
        type,
      </if>
      <if test="converImage != null">
        conver_image,
      </if>
      <if test="forwardTitle != null">
        forward_title,
      </if>
      <if test="forwardUrl != null">
        forward_url,
      </if>
      <if test="contentType != null">
        content_type,
      </if>
      <if test="thumbnail != null">
        thumbnail,
      </if>
      <if test="hotValue != null">
        hot_value,
      </if>
      <if test="personCount != null">
        person_count,
      </if>
      <if test="reviewCount != null">
        review_count,
      </if>
      <if test="likeCount != null">
        like_count,
      </if>
      <if test="favoriteCount != null">
        favorite_count,
      </if>
      <if test="readCount != null">
        read_count,
      </if>
      <if test="readCountDummy != null">
        read_count_dummy,
      </if>
      <if test="isTop != null">
        is_top,
      </if>
      <if test="authorization != null">
        authorization,
      </if>
      <if test="rights != null">
        rights,
      </if>
      <if test="author != null">
        author,
      </if>
      <if test="status != null">
        status,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
      <if test="updateId != null">
        update_id,
      </if>
      <if test="ugcStatus != null">
        ugc_status,
      </if>
      <if test="content != null">
        content,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="uid != null">
        #{uid,jdbcType=BIGINT},
      </if>
      <if test="forwardCid != null">
        #{forwardCid,jdbcType=BIGINT},
      </if>
      <if test="title != null">
        #{title,jdbcType=VARCHAR},
      </if>
      <if test="feeling != null">
        #{feeling,jdbcType=VARCHAR},
      </if>
      <if test="type != null">
        #{type,jdbcType=INTEGER},
      </if>
      <if test="converImage != null">
        #{converImage,jdbcType=VARCHAR},
      </if>
      <if test="forwardTitle != null">
        #{forwardTitle,jdbcType=VARCHAR},
      </if>
      <if test="forwardUrl != null">
        #{forwardUrl,jdbcType=VARCHAR},
      </if>
      <if test="contentType != null">
        #{contentType,jdbcType=INTEGER},
      </if>
      <if test="thumbnail != null">
        #{thumbnail,jdbcType=VARCHAR},
      </if>
      <if test="hotValue != null">
        #{hotValue,jdbcType=INTEGER},
      </if>
      <if test="personCount != null">
        #{personCount,jdbcType=INTEGER},
      </if>
      <if test="reviewCount != null">
        #{reviewCount,jdbcType=INTEGER},
      </if>
      <if test="likeCount != null">
        #{likeCount,jdbcType=INTEGER},
      </if>
      <if test="favoriteCount != null">
        #{favoriteCount,jdbcType=INTEGER},
      </if>
      <if test="readCount != null">
        #{readCount,jdbcType=INTEGER},
      </if>
      <if test="readCountDummy != null">
        #{readCountDummy,jdbcType=INTEGER},
      </if>
      <if test="isTop != null">
        #{isTop,jdbcType=INTEGER},
      </if>
      <if test="authorization != null">
        #{authorization,jdbcType=INTEGER},
      </if>
      <if test="rights != null">
        #{rights,jdbcType=INTEGER},
      </if>
      <if test="author != null">
        #{author,jdbcType=INTEGER},
      </if>
      <if test="status != null">
        #{status,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateId != null">
        #{updateId,jdbcType=BIGINT},
      </if>
      <if test="ugcStatus != null">
        #{ugcStatus,jdbcType=INTEGER},
      </if>
      <if test="content != null">
        #{content,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.me2me.content.model.ContentExample" resultType="java.lang.Integer">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Aug 08 20:09:05 CST 2017.
    -->
    select count(*) from content
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Aug 08 20:09:05 CST 2017.
    -->
    update content
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.uid != null">
        uid = #{record.uid,jdbcType=BIGINT},
      </if>
      <if test="record.forwardCid != null">
        forward_cid = #{record.forwardCid,jdbcType=BIGINT},
      </if>
      <if test="record.title != null">
        title = #{record.title,jdbcType=VARCHAR},
      </if>
      <if test="record.feeling != null">
        feeling = #{record.feeling,jdbcType=VARCHAR},
      </if>
      <if test="record.type != null">
        type = #{record.type,jdbcType=INTEGER},
      </if>
      <if test="record.converImage != null">
        conver_image = #{record.converImage,jdbcType=VARCHAR},
      </if>
      <if test="record.forwardTitle != null">
        forward_title = #{record.forwardTitle,jdbcType=VARCHAR},
      </if>
      <if test="record.forwardUrl != null">
        forward_url = #{record.forwardUrl,jdbcType=VARCHAR},
      </if>
      <if test="record.contentType != null">
        content_type = #{record.contentType,jdbcType=INTEGER},
      </if>
      <if test="record.thumbnail != null">
        thumbnail = #{record.thumbnail,jdbcType=VARCHAR},
      </if>
      <if test="record.hotValue != null">
        hot_value = #{record.hotValue,jdbcType=INTEGER},
      </if>
      <if test="record.personCount != null">
        person_count = #{record.personCount,jdbcType=INTEGER},
      </if>
      <if test="record.reviewCount != null">
        review_count = #{record.reviewCount,jdbcType=INTEGER},
      </if>
      <if test="record.likeCount != null">
        like_count = #{record.likeCount,jdbcType=INTEGER},
      </if>
      <if test="record.favoriteCount != null">
        favorite_count = #{record.favoriteCount,jdbcType=INTEGER},
      </if>
      <if test="record.readCount != null">
        read_count = #{record.readCount,jdbcType=INTEGER},
      </if>
      <if test="record.readCountDummy != null">
        read_count_dummy = #{record.readCountDummy,jdbcType=INTEGER},
      </if>
      <if test="record.isTop != null">
        is_top = #{record.isTop,jdbcType=INTEGER},
      </if>
      <if test="record.authorization != null">
        authorization = #{record.authorization,jdbcType=INTEGER},
      </if>
      <if test="record.rights != null">
        rights = #{record.rights,jdbcType=INTEGER},
      </if>
      <if test="record.author != null">
        author = #{record.author,jdbcType=INTEGER},
      </if>
      <if test="record.status != null">
        status = #{record.status,jdbcType=INTEGER},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateTime != null">
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateId != null">
        update_id = #{record.updateId,jdbcType=BIGINT},
      </if>
      <if test="record.ugcStatus != null">
        ugc_status = #{record.ugcStatus,jdbcType=INTEGER},
      </if>
      <if test="record.content != null">
        content = #{record.content,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Aug 08 20:09:05 CST 2017.
    -->
    update content
    set id = #{record.id,jdbcType=BIGINT},
      uid = #{record.uid,jdbcType=BIGINT},
      forward_cid = #{record.forwardCid,jdbcType=BIGINT},
      title = #{record.title,jdbcType=VARCHAR},
      feeling = #{record.feeling,jdbcType=VARCHAR},
      type = #{record.type,jdbcType=INTEGER},
      conver_image = #{record.converImage,jdbcType=VARCHAR},
      forward_title = #{record.forwardTitle,jdbcType=VARCHAR},
      forward_url = #{record.forwardUrl,jdbcType=VARCHAR},
      content_type = #{record.contentType,jdbcType=INTEGER},
      thumbnail = #{record.thumbnail,jdbcType=VARCHAR},
      hot_value = #{record.hotValue,jdbcType=INTEGER},
      person_count = #{record.personCount,jdbcType=INTEGER},
      review_count = #{record.reviewCount,jdbcType=INTEGER},
      like_count = #{record.likeCount,jdbcType=INTEGER},
      favorite_count = #{record.favoriteCount,jdbcType=INTEGER},
      read_count = #{record.readCount,jdbcType=INTEGER},
      read_count_dummy = #{record.readCountDummy,jdbcType=INTEGER},
      is_top = #{record.isTop,jdbcType=INTEGER},
      authorization = #{record.authorization,jdbcType=INTEGER},
      rights = #{record.rights,jdbcType=INTEGER},
      author = #{record.author,jdbcType=INTEGER},
      status = #{record.status,jdbcType=INTEGER},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      update_id = #{record.updateId,jdbcType=BIGINT},
      ugc_status = #{record.ugcStatus,jdbcType=INTEGER},
      content = #{record.content,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Aug 08 20:09:05 CST 2017.
    -->
    update content
    set id = #{record.id,jdbcType=BIGINT},
      uid = #{record.uid,jdbcType=BIGINT},
      forward_cid = #{record.forwardCid,jdbcType=BIGINT},
      title = #{record.title,jdbcType=VARCHAR},
      feeling = #{record.feeling,jdbcType=VARCHAR},
      type = #{record.type,jdbcType=INTEGER},
      conver_image = #{record.converImage,jdbcType=VARCHAR},
      forward_title = #{record.forwardTitle,jdbcType=VARCHAR},
      forward_url = #{record.forwardUrl,jdbcType=VARCHAR},
      content_type = #{record.contentType,jdbcType=INTEGER},
      thumbnail = #{record.thumbnail,jdbcType=VARCHAR},
      hot_value = #{record.hotValue,jdbcType=INTEGER},
      person_count = #{record.personCount,jdbcType=INTEGER},
      review_count = #{record.reviewCount,jdbcType=INTEGER},
      like_count = #{record.likeCount,jdbcType=INTEGER},
      favorite_count = #{record.favoriteCount,jdbcType=INTEGER},
      read_count = #{record.readCount,jdbcType=INTEGER},
      read_count_dummy = #{record.readCountDummy,jdbcType=INTEGER},
      is_top = #{record.isTop,jdbcType=INTEGER},
      authorization = #{record.authorization,jdbcType=INTEGER},
      rights = #{record.rights,jdbcType=INTEGER},
      author = #{record.author,jdbcType=INTEGER},
      status = #{record.status,jdbcType=INTEGER},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      update_id = #{record.updateId,jdbcType=BIGINT},
      ugc_status = #{record.ugcStatus,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.me2me.content.model.Content">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Aug 08 20:09:05 CST 2017.
    -->
    update content
    <set>
      <if test="uid != null">
        uid = #{uid,jdbcType=BIGINT},
      </if>
      <if test="forwardCid != null">
        forward_cid = #{forwardCid,jdbcType=BIGINT},
      </if>
      <if test="title != null">
        title = #{title,jdbcType=VARCHAR},
      </if>
      <if test="feeling != null">
        feeling = #{feeling,jdbcType=VARCHAR},
      </if>
      <if test="type != null">
        type = #{type,jdbcType=INTEGER},
      </if>
      <if test="converImage != null">
        conver_image = #{converImage,jdbcType=VARCHAR},
      </if>
      <if test="forwardTitle != null">
        forward_title = #{forwardTitle,jdbcType=VARCHAR},
      </if>
      <if test="forwardUrl != null">
        forward_url = #{forwardUrl,jdbcType=VARCHAR},
      </if>
      <if test="contentType != null">
        content_type = #{contentType,jdbcType=INTEGER},
      </if>
      <if test="thumbnail != null">
        thumbnail = #{thumbnail,jdbcType=VARCHAR},
      </if>
      <if test="hotValue != null">
        hot_value = #{hotValue,jdbcType=INTEGER},
      </if>
      <if test="personCount != null">
        person_count = #{personCount,jdbcType=INTEGER},
      </if>
      <if test="reviewCount != null">
        review_count = #{reviewCount,jdbcType=INTEGER},
      </if>
      <if test="likeCount != null">
        like_count = #{likeCount,jdbcType=INTEGER},
      </if>
      <if test="favoriteCount != null">
        favorite_count = #{favoriteCount,jdbcType=INTEGER},
      </if>
      <if test="readCount != null">
        read_count = #{readCount,jdbcType=INTEGER},
      </if>
      <if test="readCountDummy != null">
        read_count_dummy = #{readCountDummy,jdbcType=INTEGER},
      </if>
      <if test="isTop != null">
        is_top = #{isTop,jdbcType=INTEGER},
      </if>
      <if test="authorization != null">
        authorization = #{authorization,jdbcType=INTEGER},
      </if>
      <if test="rights != null">
        rights = #{rights,jdbcType=INTEGER},
      </if>
      <if test="author != null">
        author = #{author,jdbcType=INTEGER},
      </if>
      <if test="status != null">
        status = #{status,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateId != null">
        update_id = #{updateId,jdbcType=BIGINT},
      </if>
      <if test="ugcStatus != null">
        ugc_status = #{ugcStatus,jdbcType=INTEGER},
      </if>
      <if test="content != null">
        content = #{content,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.me2me.content.model.Content">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Aug 08 20:09:05 CST 2017.
    -->
    update content
    set uid = #{uid,jdbcType=BIGINT},
      forward_cid = #{forwardCid,jdbcType=BIGINT},
      title = #{title,jdbcType=VARCHAR},
      feeling = #{feeling,jdbcType=VARCHAR},
      type = #{type,jdbcType=INTEGER},
      conver_image = #{converImage,jdbcType=VARCHAR},
      forward_title = #{forwardTitle,jdbcType=VARCHAR},
      forward_url = #{forwardUrl,jdbcType=VARCHAR},
      content_type = #{contentType,jdbcType=INTEGER},
      thumbnail = #{thumbnail,jdbcType=VARCHAR},
      hot_value = #{hotValue,jdbcType=INTEGER},
      person_count = #{personCount,jdbcType=INTEGER},
      review_count = #{reviewCount,jdbcType=INTEGER},
      like_count = #{likeCount,jdbcType=INTEGER},
      favorite_count = #{favoriteCount,jdbcType=INTEGER},
      read_count = #{readCount,jdbcType=INTEGER},
      read_count_dummy = #{readCountDummy,jdbcType=INTEGER},
      is_top = #{isTop,jdbcType=INTEGER},
      authorization = #{authorization,jdbcType=INTEGER},
      rights = #{rights,jdbcType=INTEGER},
      author = #{author,jdbcType=INTEGER},
      status = #{status,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      update_id = #{updateId,jdbcType=BIGINT},
      ugc_status = #{ugcStatus,jdbcType=INTEGER},
      content = #{content,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.me2me.content.model.Content">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Aug 08 20:09:05 CST 2017.
    -->
    update content
    set uid = #{uid,jdbcType=BIGINT},
      forward_cid = #{forwardCid,jdbcType=BIGINT},
      title = #{title,jdbcType=VARCHAR},
      feeling = #{feeling,jdbcType=VARCHAR},
      type = #{type,jdbcType=INTEGER},
      conver_image = #{converImage,jdbcType=VARCHAR},
      forward_title = #{forwardTitle,jdbcType=VARCHAR},
      forward_url = #{forwardUrl,jdbcType=VARCHAR},
      content_type = #{contentType,jdbcType=INTEGER},
      thumbnail = #{thumbnail,jdbcType=VARCHAR},
      hot_value = #{hotValue,jdbcType=INTEGER},
      person_count = #{personCount,jdbcType=INTEGER},
      review_count = #{reviewCount,jdbcType=INTEGER},
      like_count = #{likeCount,jdbcType=INTEGER},
      favorite_count = #{favoriteCount,jdbcType=INTEGER},
      read_count = #{readCount,jdbcType=INTEGER},
      read_count_dummy = #{readCountDummy,jdbcType=INTEGER},
      is_top = #{isTop,jdbcType=INTEGER},
      authorization = #{authorization,jdbcType=INTEGER},
      rights = #{rights,jdbcType=INTEGER},
      author = #{author,jdbcType=INTEGER},
      status = #{status,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      update_id = #{updateId,jdbcType=BIGINT},
      ugc_status = #{ugcStatus,jdbcType=INTEGER}
    where id = #{id,jdbcType=BIGINT}
  </update>

  <select id="loadSquareData" resultMap="ResultMapWithBLOBs">
    select
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from content where id &lt; #{sinceId} and type != 2 and type != 4 and status != 1 and rights = 1
      order by id desc limit 10
  </select>

  <select id="loadHighQualityData" resultMap="ResultMapWithBLOBs">
        select
    c.id, c.uid,c.title, c.forward_cid, c.feeling, c.type, c.conver_image, c.forward_title, c.forward_url, c.content_type,
    c.thumbnail, c.hot_value, c.like_count,c.favorite_count, c.read_count, c.read_count_dummy ,c.authorization, c.create_time, c.status,c.content
    from content c  right join high_quality_content h on c.id = h.cid  where c.id &lt; #{sinceId} and c.status != 1
    order by c.id desc limit 10
</select>

  <select id="loadMyPublishData" parameterType="Map" resultMap="ResultMapWithBLOBs">
      select
  c.id, c.uid,c.title, c.forward_cid, c.feeling, c.type, c.conver_image, c.forward_title, c.forward_url, c.content_type,
  c.thumbnail, c.hot_value, c.like_count,c.review_count,c.person_count,c.favorite_count, c.read_count, c.read_count_dummy ,c.authorization, c.create_time, c.status,c.content,c.rights
  from content c where c.status != 1 and c.uid =  #{uid,jdbcType=BIGINT} and c.id &lt; #{sinceId}
  order by c.id desc limit 10
  </select>

  <select id="loadMyPublishUgcData" parameterType="Map" resultMap="ResultMapWithBLOBs">
    select
    c.id, c.uid,c.title, c.forward_cid, c.feeling, c.type, c.conver_image, c.forward_title, c.forward_url, c.content_type,
    c.thumbnail, c.hot_value, c.like_count,c.review_count,c.person_count,c.favorite_count, c.read_count, c.read_count_dummy ,c.authorization, c.create_time, c.status,c.content,c.rights
    from content c where c.status != 1 and c.uid =  #{uid,jdbcType=BIGINT}
    <if test="flag == 0">
    and c.type in (0,1,8,9)
    </if>
    <if test="flag != 0">
    and c.type in (0,1,6,8,9)
    </if>
    and c.id &lt; #{sinceId}
    order by c.id desc limit 10
  </select>

  <select id="loadMyPublishLiveData" parameterType="Map" resultMap="ResultMapWithBLOBs">
    select
    c.id, c.uid,c.title, c.forward_cid, c.feeling, c.type, c.conver_image, c.forward_title, c.forward_url, c.content_type,
    c.thumbnail, c.hot_value, c.like_count,c.review_count,c.person_count,c.favorite_count, c.read_count, c.read_count_dummy ,c.authorization, c.create_time, c.status,c.content,c.rights
    from content c ,topic t  where c.forward_cid=t.id and c.type=3 and c.status != 1 and (c.uid =  #{uid,jdbcType=BIGINT} or FIND_IN_SET(#{uid,jdbcType=BIGINT},SUBSTR(t.core_circle FROM 2 FOR LENGTH(t.core_circle)-2))) and c.type in (3,6) and t.long_time &lt; #{updateTime}
    order by t.long_time desc limit 10
  </select>

  <select id="loadMyPublishLiveData2" parameterType="Map" resultMap="ResultMapWithBLOBs">
    select
    c.id, c.uid,c.title, c.forward_cid, c.feeling, c.type, c.conver_image, c.forward_title, c.forward_url, c.content_type,
    c.thumbnail, c.hot_value, c.like_count,c.review_count,c.person_count,c.favorite_count, c.read_count, c.read_count_dummy ,c.authorization, c.create_time, c.status,c.content,c.rights
    from content c  where c.status != 1 and c.uid =  #{uid,jdbcType=BIGINT} and c.type=3 and c.id &lt; #{sinceId}
    order by c.id desc limit 10
  </select>

  <select id="loadMyPublishDataByType" parameterType="com.me2me.content.dto.MyPublishDto" resultMap="ResultMapWithBLOBs">
    select
    c.id, c.uid,c.title, c.forward_cid, c.feeling, c.type, c.conver_image, c.forward_title, c.forward_url, c.content_type,
    c.thumbnail, c.hot_value, c.like_count,c.review_count,c.person_count,c.favorite_count, c.read_count, c.read_count_dummy ,c.authorization, c.create_time, c.status,c.content,c.rights
    from content c
    <if test="type == 3">
     left join topic t on c.forward_cid = t.id
    </if>
    where  c.status = 0  and (c.uid = #{uid,jdbcType=BIGINT}
    <if test="type==3">
      or find_in_set(#{uid,jdbcType=BIGINT},SUBSTR(t.core_circle FROM 2 FOR LENGTH(t.core_circle)-2))
    </if>
    )
    <if test="isOwner == 0">
      and c.rights = 1
    </if>
    <if test="type == 0">
     and c.type != 3
    </if>
    <if test="flag == 0">
     and c.type != 6
    </if>
    <if test="type == 3">
      and c.type = 3
      and t.long_time &lt; #{updateTime,jdbcType=BIGINT}
    </if>
    <if test="type == 0">
      and c.id &lt; #{sinceId}
    </if>
    <if test="type == 3 ">
    order by t.long_time desc limit 10
    </if>
    <if test="type == 0 ">
      order by c.id desc limit 10
    </if>
  </select>
  
  <select id="loadMyKingdom" parameterType="com.me2me.content.dto.MyPublishDto" resultMap="ResultMapWithBLOBs">
  select 
    c.id, c.uid,c.title, c.forward_cid, c.feeling, c.type, c.conver_image, c.forward_title, c.forward_url, c.content_type,
    c.thumbnail, c.hot_value, c.like_count,c.review_count,c.person_count,c.favorite_count, c.read_count, c.read_count_dummy ,c.authorization, c.create_time, c.status,c.content,c.rights
from content c,(
select t.id,t.long_time
from topic t
where (t.uid=#{uid,jdbcType=BIGINT}
or find_in_set(#{uid,jdbcType=BIGINT},SUBSTR(t.core_circle FROM 2 FOR LENGTH(t.core_circle)-2))
)
and t.long_time &lt; #{updateTime,jdbcType=BIGINT}
order by t.long_time desc limit 10
) m
where c.forward_cid=m.id and c.type=3
and c.status=0
order by m.long_time desc
  </select>
  
    <select id="getMyOwnKingdom" parameterType="com.me2me.content.dto.MyPublishDto" resultMap="ResultMapWithBLOBs">
  select 
    c.id, c.uid,c.title, c.forward_cid, c.feeling, c.type, c.conver_image, c.forward_title, c.forward_url, c.content_type,
    c.thumbnail, c.hot_value, c.like_count,c.review_count,c.person_count,c.favorite_count, c.read_count, c.read_count_dummy ,c.authorization, c.create_time, c.status,c.content,c.rights
from content c,(
select t.id,t.long_time
from topic t
where t.uid=#{uid,jdbcType=BIGINT}
and t.long_time &lt; #{updateTime,jdbcType=BIGINT}
order by t.long_time desc limit 10
) m
where c.forward_cid=m.id and c.type=3
and c.status=0
order by m.long_time desc
  </select>
  
  <select id="countMyKingdom" parameterType="com.me2me.content.dto.MyPublishDto" resultType="java.lang.Integer">
  select count(1)
from topic t
where t.uid=#{uid,jdbcType=BIGINT}
  </select>

  <select id="loadMyJoinKingdom" parameterType="com.me2me.content.dto.MyPublishDto" resultMap="ResultMapWithBLOBs">
   select 
    c.id, c.uid,c.title, c.forward_cid, c.feeling, c.type, c.conver_image, c.forward_title, c.forward_url, c.content_type,
    c.thumbnail, c.hot_value, c.like_count,c.review_count,c.person_count,c.favorite_count, c.read_count, c.read_count_dummy ,c.authorization, c.create_time, c.status,c.content,c.rights
from content c,(
select t1.id,t1.long_time
from topic t1,live_favorite f
where t1.id=f.topic_id
and f.uid=#{uid,jdbcType=BIGINT}
and t1.uid!=#{uid,jdbcType=BIGINT}
and t1.long_time &lt; #{updateTime,jdbcType=BIGINT}
UNION
select t2.id,t2.long_time
from topic t2
where t2.uid!=#{uid,jdbcType=BIGINT}
and find_in_set(#{uid,jdbcType=BIGINT},SUBSTR(t2.core_circle FROM 2 FOR LENGTH(t2.core_circle)-2))
and t2.long_time &lt; #{updateTime,jdbcType=BIGINT}
order by long_time desc limit 10
) m
where c.forward_cid=m.id and c.type=3
and c.status=0
order by m.long_time desc
  </select>
  
  <select id="countMyJoinKingdom" parameterType="com.me2me.content.dto.MyPublishDto" resultType="java.lang.Integer">
  select count(1) from (
select t1.id
from topic t1,live_favorite f
where t1.id=f.topic_id
and f.uid=#{uid,jdbcType=BIGINT}
and t1.uid!=#{uid,jdbcType=BIGINT}
UNION
select t2.id
from topic t2
where t2.uid!=#{uid,jdbcType=BIGINT}
and find_in_set(#{uid,jdbcType=BIGINT},SUBSTR(t2.core_circle FROM 2 FOR LENGTH(t2.core_circle)-2))
) m
  </select>

  <select id="countMyPublishByType" parameterType="com.me2me.content.dto.MyPublishDto" resultType="java.lang.Integer">
    select count(*)
    from content c
    <if test="type == 3">
      left join topic t on c.forward_cid = t.id
    </if>
    where c.status = 0 and (c.uid = #{uid,jdbcType=BIGINT}
    <if test="type==3">
      or find_in_set(#{uid,jdbcType=BIGINT},SUBSTR(t.core_circle FROM 2 FOR LENGTH(t.core_circle)-2))
    </if>
    )
    <if test="isOwner == 0">
      and c.rights = 1
    </if>
    <if test="type == 3">
      and c.type = 3
    </if>
    <if test="type == 0">
      and c.type != 3
    </if>
    <if test="flag == 0">
     and c.type != 6
    </if>
  </select>

  <select id="loadSelectedData" resultMap="ResultMapWithBLOBs">
    select
    c.id, c.uid,c.title, c.forward_cid, c.feeling, c.type, c.conver_image, c.forward_title, c.forward_url, c.content_type,
    c.thumbnail, c.hot_value, c.like_count,c.favorite_count, c.read_count, c.authorization, c.create_time, c.status,c.content ,c.rights
    from content c  right join high_quality_content h on c.id = h.cid  where c.id &lt; #{sinceId} and c.status != 1 and c.author = 1
    order by c.id desc limit 1
  </select>

  <select id="loadActivityData" resultMap="ResultMapWithBLOBs">
    select
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from content where id &lt; #{sinceId} and type = 4 and status != 1
    order by id desc limit 5
  </select>

  <select id="getTopicStatus" resultType="java.lang.Integer">
   select status from topic where id = #{topicId,jdbcType=BIGINT}
  </select>

  <delete id="deleteTopicById">
    delete  from topic where id = #{topicId,jdbcType=BIGINT}
  </delete>

  <select id="isFavorite" parameterType="com.me2me.content.dto.IsFavoriteDto" resultType="java.lang.Integer">

    select count(id) from live_favorite where topic_id = #{topicId,jdbcType=BIGINT} and uid = #{uid,jdbcType=BIGINT}

  </select>

  <select id="loadHottestContent" resultMap="ResultMapWithBLOBs">
    select
    c.id, c.uid,c.title, c.forward_cid, c.feeling, c.type, c.conver_image, c.forward_title, c.forward_url, c.content_type,
    c.thumbnail, c.hot_value, c.like_count, c.review_count,c.person_count,c.favorite_count, c.read_count, c.read_count_dummy ,c.authorization, c.create_time, c.status,c.content
    from content c  right join high_quality_content h on c.id = h.cid  where c.id &lt; #{sinceId} and c.status != 1 and c.is_top = 0 and c.rights = 1
    order by c.id desc limit 10
  </select>

  <select id="loadHottestTopsContent" resultMap="ResultMapWithBLOBs">
    select
    c.id, c.uid,c.title, c.forward_cid, c.feeling, c.type, c.conver_image, c.forward_title, c.forward_url, c.content_type,
    c.thumbnail, c.hot_value, c.like_count, c.review_count,c.person_count,c.favorite_count, c.read_count, c.read_count_dummy ,c.authorization, c.create_time, c.status,c.content
    from content c  right join high_quality_content h on c.id = h.cid  where c.is_top = 1 and c.status != 1  and c.rights = 1
    <if test="flag == 0">
    and c.type != 6
    </if>
    order by c.id desc limit 5
  </select>

  <select id="loadNewestContent4Old" resultMap="ResultMapWithBLOBs">
    select
    c.id, c.uid,c.title, c.forward_cid, c.feeling, c.type, c.conver_image, c.forward_title, c.forward_url, c.content_type,c.update_id,c.update_time,
    c.thumbnail, c.hot_value, c.like_count,c.review_count,c.person_count,c.favorite_count, c.read_count, c.read_count_dummy ,c.authorization, c.create_time, c.status,c.content,c.rights
    from content c left join topic t on c.forward_cid = t.id and c.type=3 where c.id &lt; #{sinceId} and c.status != 1 and c.rights = 1 and (t.sub_type = 0 or t.sub_type is null)
    and  c.type=3
    <if test="blacklistUids!=null and blacklistUids.size() &gt; 0">
      and c.uid not in
      <foreach close=")" collection="blacklistUids" item="bid" open="(" separator=",">
        #{bid}
      </foreach>
    </if>
   and c.forward_cid not in(
		select data from user_dislike where uid=#{uid} and is_like=0 and type=1
	)
    order by c.id desc limit 10
  </select>

  <select id="loadNewestContent" resultMap="ResultMapWithBLOBs">
    select
    c.id, c.uid,c.title, c.forward_cid, c.feeling, c.type, c.conver_image, c.forward_title, c.forward_url, c.content_type,c.update_id,c.update_time,
    c.thumbnail, c.hot_value, c.like_count,c.review_count,c.person_count,c.favorite_count, c.read_count, c.read_count_dummy ,c.authorization, c.create_time, c.status,c.content,c.rights
    from content c left join topic t on c.forward_cid = t.id and c.type=3 where c.update_id &lt; #{sinceId} and c.status != 1 and c.rights = 1 
    and  c.type=3 and t.rights!=3
    <if test="blacklistUids!=null and blacklistUids.size() &gt; 0">
      and c.uid not in
      <foreach close=")" collection="blacklistUids" item="bid" open="(" separator=",">
        #{bid}
      </foreach>
    </if>
     and c.forward_cid not in(
		select data from user_dislike where uid=#{uid} and is_like=0 and type=1
	)
    order by c.update_id desc,c.id desc limit 10
  </select>

  <select id="countFragment" parameterType="com.me2me.content.dto.CountFragmentDto" resultType="java.lang.Integer">
    select count(*)  from topic_fragment where topic_id = #{topicId,jdbcType=BIGINT} and uid != #{uid,jdbcType=BIGINT} and status=1
  </select>

  <select id="kingTopic" parameterType="com.me2me.content.dto.KingTopicDto" resultType="com.me2me.content.dto.ResultKingTopicDto">
    select id,uid,live_image as coverImage,title as title,status as status,create_time as createTime,review_count as reviewCount,like_count as likeCount  from topic_count_view  where 1=1
    <if test="startDate != null">
      and create_time &gt;= #{startDate,jdbcType=TIMESTAMP}
    </if>
    <if test="endDate != null">
      and create_time &lt;= #{endDate,jdbcType=TIMESTAMP}
    </if>
    <if test="uid != 0">
      and uid = #{uid,jdbcType=BIGINT}
    </if>
    <if test="reviewCount != 0">
      and review_count &gt;= #{reviewCount,jdbcType=BIGINT}
    </if>
    <if test="likeCount != 0">
      and like_count &gt;= #{likeCount,jdbcType=BIGINT}
    </if>
  </select>

  <select id="getTopicCount" parameterType="java.lang.Long" resultType="java.lang.Integer">
    select count(id) from topic_fragment where topic_id = #{topicId,jdbcType=BIGINT} and status=1
  </select>

  <select id="getTopicLastUpdateTime" parameterType="java.lang.Long" resultType="java.lang.Long">
    select long_time from topic where id = #{topicId,jdbcType=BIGINT}
  </select>

  <update id="clearData">
    update content set status = 1 where type = 3 and forward_cid not in (select id from topic) and status !=1
  </update>

  <select id="loadHottestContentByUpdateTime" resultMap="ResultMapWithBLOBs2">
    select
    c.id, c.uid,c.title, c.forward_cid, c.feeling, c.type, c.conver_image, c.forward_title, c.forward_url, c.content_type,
    c.thumbnail, c.hot_value, c.like_count, c.review_count,c.person_count,c.favorite_count, c.read_count, c.read_count_dummy ,c.authorization, c.create_time, c.status,c.content,c.rights
    ,h.id as hid
    from content c  right join high_quality_content h on c.id = h.cid  where h.id &lt; #{sinceId} and c.status != 1 and c.is_top = 0 and c.rights = 1
    <if test="flag == 0">
    and c.type != 6
    </if>
    order by h.id desc limit 10
  </select>

  <select id="getHotContentByType" parameterType="com.me2me.content.dto.HotQueryDto" resultMap="ResultMapWithBLOBs2">
     select c.id, c.uid,c.title, c.forward_cid, c.feeling, c.type, c.conver_image,
	 c.forward_title, c.forward_url, c.content_type, c.thumbnail, c.hot_value,
	 c.like_count, c.review_count,c.person_count,c.favorite_count, c.read_count,
	 c.read_count_dummy ,c.authorization, c.create_time, c.status,c.content,c.rights,c.update_time,h.id as hid
	 from high_quality_content h,content c LEFT JOIN topic t on c.forward_cid=t.id and c.type=3
     where c.status != 1 and c.rights=1
     <if test="hq.type == 0">
     and c.type=3
     </if>
     <if test="hq.type == 1">
     and c.type=3 and t.type=1000
     </if>
     and c.id = h.cid
     and c.forward_cid not in (
      	select data from user_dislike where uid=#{hq.uid} and is_like=0 and type=1
      	<if test="hq.blackTagIds!=''">
      	union all
      	select topic_id as data from topic_tag_detail where status=0 and tag_id in (${hq.blackTagIds})
      	</if>
      )
   	<if test="hq.ids!=null and hq.ids.size() &gt; 0">
       and h.id not in
       <foreach close=")" collection="hq.ids" item="id" open="(" separator=",">
         #{id}
       </foreach>
     </if>
     <if test="hq.blacklistUids!=null and hq.blacklistUids.size() &gt; 0">
       and c.uid not in
       <foreach close=")" collection="hq.blacklistUids" item="bid" open="(" separator=",">
         #{bid}
       </foreach>
     </if>
     and UNIX_TIMESTAMP(c.update_time)*1000 &lt; #{hq.sinceId}
	 order by c.update_time desc limit #{hq.pageSize}
  	</select>
  	
  	<select id="getHotContentListByType" parameterType="com.me2me.content.dto.HotQueryDto" resultMap="ResultMapWithBLOBs2">
  	   SELECT c.id, c.uid, c.title, c.forward_cid, c.feeling , c.type, c.conver_image, c.forward_title, c.forward_url, c.content_type , 
					c.thumbnail, c.hot_value, c.like_count, c.review_count, c.person_count , c.favorite_count, c.read_count, c.read_count_dummy, 
					c.authorization, c.create_time , c.status, c.content, c.rights, c.update_time ,h.id AS hid
	   from high_quality_content h, content c LEFT JOIN topic t ON c.forward_cid = t.id and c.type=3
	   where c.status != 1 and c.rights=1 and c.type=3 and c.id=h.cid
  	   and c.forward_cid not in (
      	select data from user_dislike where uid=#{hq.uid} and is_like=0 and type=1
      	<if test="hq.blackTagIds!=''">
      	union all
      	select topic_id as data from topic_tag_detail where status=0 and tag_id in (${hq.blackTagIds})
      	</if>
      )
  	  <if test="hq.ids!=null and hq.ids.size() &gt; 0">
       and h.id not in
       <foreach close=")" collection="hq.ids" item="id" open="(" separator=",">
         #{id}
       </foreach>
     </if> 
     <if test="hq.blacklistUids!=null and hq.blacklistUids.size() &gt; 0">
       and c.uid not in
       <foreach close=")" collection="hq.blacklistUids" item="bid" open="(" separator=",">
         #{bid}
       </foreach>
     </if>
	 order by c.update_time desc limit #{hq.start},#{hq.pageSize}
  	</select>
  	
  <select id="getHotContentByRedis" parameterType="java.util.List" resultMap="ResultMapWithBLOBs2">
      select m.*,h.id as hid FROM
      (select c.id, c.uid,c.title, c.forward_cid, c.feeling, c.type, c.conver_image,
      c.forward_title, c.forward_url, c.content_type, c.thumbnail, c.hot_value,
      c.like_count, c.review_count,c.person_count,c.favorite_count, c.read_count,
      c.read_count_dummy ,c.authorization, c.create_time, c.status,c.content,c.rights,c.update_time
      from content c LEFT JOIN topic t on c.forward_cid=t.id and c.type=3
      where c.status != 1 and c.rights=1
      ) m,high_quality_content h
      where m.id = h.cid and m.type=3 and h.id in
      <foreach close=")" collection="ids" item="id" open="(" separator=",">
        #{id}
      </foreach>
      and m.forward_cid not in(
      	select data from user_dislike where uid=#{uid} and is_like=0 and type=1
      	<if test="blackTagIds!=''">
      	union all
      	select topic_id as data from topic_tag_detail where status=0 and tag_id in (${blackTagIds})
      	</if>
      )
      <if test="blacklistUids!=null and blacklistUids.size() &gt; 0">
      and m.uid not in
      <foreach close=")" collection="blacklistUids" item="bid" open="(" separator=",">
        #{bid}
      </foreach>
      </if>

  </select>

  <select id="getAttention" parameterType="java.util.Map" resultMap="ResultMapWithBLOBs">
    select
      <include refid="Base_Column_List" />,
      <include refid="Blob_Column_List" />
     from (select <include refid="Base_Column_List" />,
    <include refid="Blob_Column_List" /> from content where uid IN (SELECT target_uid from user_follow where source_uid = #{uid} and target_uid != 0) and `status` != 1 and rights = 1
    and type=3
    <if test="flag == 0">
    and type != 6
    </if>
    UNION
    select
    <include refid="Base_Column_List" />,
    <include refid="Blob_Column_List" />
    from content where uid = #{uid} AND `status` != 1
    and type=3
    <if test="flag == 0">
    and type != 6
    </if>
    ) v where v.id &lt; #{sinceId}
    order by v.id desc limit 10
  </select>

  <select id="getTagTopicList" parameterType="java.util.Map" resultMap="ResultMapWithBLOBs">
	select
	c.id, c.uid,c.title, c.forward_cid, c.feeling, c.type, c.conver_image,
	c.forward_title, c.forward_url, c.content_type,
	c.thumbnail, c.hot_value,
	c.like_count,c.review_count,c.person_count,c.favorite_count,
	c.read_count, c.read_count_dummy ,c.authorization, c.create_time,
	c.status,c.content,c.rights
	FROM content c,(
	SELECT distinct t.id,t.out_time
	FROM topic t,topic_tag_detail td,topic_tag tt
	WHERE t.id =td.topic_id AND tt.id = td.tag_id AND td.status=0 and tt.id = #{tagId} 
	      <if test="blacklistUids!=null and blacklistUids.size() &gt; 0">
      and t.uid not in
      <foreach close=")" collection="blacklistUids" item="bid" open="(" separator=",">
        #{bid}
      </foreach>
      </if>
	ORDER BY t.out_time DESC LIMIT ${(page-1)*pageSize},#{pageSize}
	) m
	WHERE c.forward_cid=m.id AND c.type=3
	AND c.status=0
	ORDER BY m.out_time DESC
  </select>

  <select id="getAcKingdomList" resultMap="ResultMapWithBLOBs">
    select
    c.id, c.uid,c.title, c.forward_cid, c.feeling, c.type, c.conver_image, c.forward_title, c.forward_url, c.content_type,c.update_id,c.update_time,
    c.thumbnail, c.hot_value, c.like_count,c.review_count,c.person_count,c.favorite_count, c.read_count, c.read_count_dummy ,c.authorization, c.create_time, c.status,c.content,c.rights,a.is_top
    from content c left join topic t on c.forward_cid = t.id and c.type=3,topic_aggregation a where a.sub_topic_id = c.forward_cid and a.topic_id=#{topicId} and c.status != 1 and c.rights = 1
    and  c.type=3
    order by a.is_top desc,c.update_id desc limit  ${(page-1)*pageSize},#{pageSize}
  </select>
	<select id="getAcKingdomImageList" resultType="map">
	select
	ti.id,ti.topic_id,ti.fid,tf.fragment_image,tf.fragment,tf.type,tf.content_type,ti.extra,ti.create_time,tf.uid,t.title,ti.like_count,ti.image
	from topic_image ti,topic_aggregation ta,topic_fragment tf,topic t
	where ti.topic_id = ta.sub_topic_id and ta.topic_id=#{topicId} and
	tf.id=ti.fid and t.id =ti.topic_id order by ti.create_time desc,ti.fid desc
	limit ${(page-1)*pageSize},#{pageSize}
</select>
   <select id="getAcKingdomImageLikeList" resultType="java.lang.Long">
	select image_id from topic_fragment_like_his where uid  = #{uid}
	  <if test="imageIdList!=null and imageIdList.size() &gt; 0">
      and image_id  in
      <foreach close=")" collection="imageIdList" item="ids" open="(" separator=",">
        #{ids}
      </foreach>
      </if>
</select>


	<select id="getAttentionAndLikeTagCount" resultType="java.lang.Integer">
	select COUNT(*) as count from(select
		c.id,c.type
		from content c,topic t
		where
		c.forward_cid=t.id and c.type=3
		and (c.uid = #{uid}
		or c.uid in (select
		f.target_uid from user_follow f where
		f.source_uid=#{uid})
		) and
		c.status != 1 and c.rights = 1
		UNION
		select u.tag_id,16
		from user_tag u,topic_tag_detail d,topic t2
		where u.uid=#{uid}
		and u.type=1
		and u.tag_id=d.tag_id
		and d.status=0
		and d.topic_id=t2.id
		group by u.tag_id
		having COUNT(d.topic_id)>0
            ) m
</select>
	<select id="getTagTopicInfo" resultType="java.util.Map"  >
			select
		o1.tag_id,
		SUM(o1.topic_count) kingdomCount,
		SUM(o1.price_sum) tagPrice,
		o2.uid_count tagPersons
		FROM
		(SELECT
		t4.id tag_id,
		COUNT(DISTINCT t1.id) topic_count,
		SUM(DISTINCT t1.price) price_sum
		FROM
		topic t1,
		content t2,
		topic_tag_detail t3,
		topic_tag t4
		WHERE t1.id = t2.forward_cid
		AND t4.id = t3.tag_id
		AND t2.type = 3
		AND t1.id = t3.topic_id
		AND t1.status = 0
		AND t3.status = 0
		and t4.id in
		<if test="idList!=null and idList.size() &gt; 0">
			<foreach close=")" collection="idList" item="ids" open="("
				separator=",">
				#{ids}
			</foreach>
		</if>
		GROUP BY t4.id) o1,
		(SELECT x.tag_id,<![CDATA[x.userCount+FLOOR(y.readcount / 20)]]> uid_count
		FROM (
		SELECT m2.id as tag_id,COUNT(DISTINCT t1.uid) AS userCount
		FROM (
		SELECT t2.topic_id,t4.id
		FROM topic_tag_detail t2,topic_tag t4
		WHERE t2.status=0
		AND t2.tag_id=t4.id
		and t4.id in
		<if test="idList!=null and idList.size() &gt; 0">
			<foreach close=")" collection="idList" item="ids" open="("
				separator=",">
				#{ids}
			</foreach>
		</if>
		GROUP BY t4.id,t2.topic_id
		) m2,topic_fragment t1
		WHERE m2.topic_id=t1.topic_id
		AND t1.status=1
		GROUP BY m2.id
		) X,(
		SELECT m.id as tag_id,SUM(t3.read_count) AS readcount
		FROM (
		SELECT t2.topic_id,t4.id
		FROM topic_tag_detail t2,topic_tag t4
		WHERE t2.status=0
		AND t2.tag_id=t4.id
		and t4.id IN
		<if test="idList!=null and idList.size() &gt; 0">
			<foreach close=")" collection="idList" item="ids" open="("
				separator=",">
				#{ids}
			</foreach>
		</if>
		GROUP BY t4.id,t2.topic_id
		) m,content t3
		WHERE m.topic_id=t3.forward_cid AND t3.type=3
		GROUP BY m.id
		) Y
		WHERE x.tag_id=y.tag_id) o2
		WHERE o1.tag_id = o2.tag_id
		GROUP BY o1.tag_id
</select>
  

</mapper>
